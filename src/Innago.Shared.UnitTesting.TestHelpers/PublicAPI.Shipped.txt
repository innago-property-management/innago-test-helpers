#nullable enable
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyMethod<TReturn>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression) -> System.Reflection.MethodInfo!
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyMethodAttribute<TAttribute>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression) -> System.Collections.Generic.IEnumerable<TAttribute!>!
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyParameter(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, string! parameterName) -> System.Reflection.ParameterInfo?
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyParameter(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, System.Type! parameterType, string? name = null) -> System.Reflection.ParameterInfo?
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyParameter<TParameter>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, string! name) -> System.Reflection.ParameterInfo?
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyParameterAttribute<TAttribute>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, string! parameterName) -> System.Collections.Generic.IEnumerable<TAttribute!>!
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyThrows<TException>(System.Action! action) -> FluentAssertions.Specialized.ExceptionAssertions<TException!>?
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUses<T, TResult>(System.Action! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Func<T!, TResult>!>! expression) -> void
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUses<T, TResult>(System.Action! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Func<T!, TResult>!>! expression, Moq.Times times) -> void
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUses<T>(System.Action! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Action<T!>!>! expression) -> void
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUses<T>(System.Action! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Action<T!>!>! expression, Moq.Times times) -> void
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckAttribute<TAttribute>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression) -> TAttribute!
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckInvariance<T>(System.Linq.Expressions.Expression<System.Func<T>!>! expression, System.Collections.Generic.IEnumerable<T>? values = null) -> void
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckInvarianceWithValue(System.Linq.Expressions.Expression<System.Func<bool>!>! expression) -> void
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckMaxLength(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, int maxLength) -> void
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckProperty<T>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, bool? readOnly = null, object? expectedDefaultValue = null, bool testDefaultEquivalence = false, bool skipDefaultValueCheck = false) -> System.Reflection.PropertyInfo!
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckRange<TValue>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, TValue minValue, TValue maxValue) -> void
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckRequired(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, bool allowEmptyStrings = false) -> void
Innago.Shared.UnitTesting.TestHelpers.MethodChecker
Innago.Shared.UnitTesting.TestHelpers.PropertyChecker
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyParameterDefaultValue<TParameter>(System.Linq.Expressions.Expression<System.Func<object?>!>! expression, string! name, TParameter expectedDefaultValue) -> System.Reflection.ParameterInfo!
static Innago.Shared.UnitTesting.TestHelpers.LogVerifier.VerifyLogCall<TCategory>(this Microsoft.Extensions.Logging.ILogger<TCategory>! logger, Microsoft.Extensions.Logging.LogLevel expectedLogLevel, string! expectedMessagePattern, System.Exception? exception = null, Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption matchOption = Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption.Equals, Xunit.Abstractions.ITestOutputHelper? testOutputHelper = null) -> void
Innago.Shared.UnitTesting.TestHelpers.LogVerifier
Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption
Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption.Contains = 3 -> Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption
Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption.EndsWith = 2 -> Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption
Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption.Equals = 0 -> Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption
Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption.RegEx = 4 -> Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption
Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption.StartsWith = 1 -> Innago.Shared.UnitTesting.TestHelpers.LogVerifier.StringMatchOption
static Innago.Shared.UnitTesting.TestHelpers.ServiceVerifier.VerifyService<TService, TImplementation>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor!>!
static Innago.Shared.UnitTesting.TestHelpers.ServiceVerifier.VerifyService<TService, TImplementation>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime serviceLifetime) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor!>!
static Innago.Shared.UnitTesting.TestHelpers.ServiceVerifier.VerifyService<TService>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor!>!
static Innago.Shared.UnitTesting.TestHelpers.ServiceVerifier.VerifyService<TService>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime serviceLifetime) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor!>!
static Innago.Shared.UnitTesting.TestHelpers.ServiceVerifier.VerifyService<TService>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime serviceLifetime, bool requireImplementationFactory) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor!>!
Innago.Shared.UnitTesting.TestHelpers.ServiceVerifier
static Innago.Shared.UnitTesting.TestHelpers.PropertyChecker.CheckInitOnly(System.Linq.Expressions.Expression<System.Func<object?>!>! expression) -> void
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUsesAsync<T, TResult>(System.Func<System.Threading.Tasks.Task!>! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Func<T!, TResult>!>! expression) -> System.Threading.Tasks.Task!
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUsesAsync<T, TResult>(System.Func<System.Threading.Tasks.Task!>! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Func<T!, TResult>!>! expression, Moq.Times times) -> System.Threading.Tasks.Task!
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUsesAsync<T>(System.Func<System.Threading.Tasks.Task!>! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Action<T!>!>! expression) -> System.Threading.Tasks.Task!
static Innago.Shared.UnitTesting.TestHelpers.MethodChecker.VerifyUsesAsync<T>(System.Func<System.Threading.Tasks.Task!>! act, Moq.Mock<T!>! mock, System.Linq.Expressions.Expression<System.Action<T!>!>! expression, Moq.Times times) -> System.Threading.Tasks.Task!
static Innago.Shared.UnitTesting.TestHelpers.ServiceVerifier.VerifyService(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection, System.Type! serviceType, Microsoft.Extensions.DependencyInjection.ServiceLifetime? serviceLifetime = null, bool requireImplementationFactory = false) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor!>!